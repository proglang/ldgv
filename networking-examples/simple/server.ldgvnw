type End : ~unit = Unit


type EOS : ! ~un = {'EOS}
type End : ! ~unit = Unit

type TClient : ! ~ssn =
  !( l : {'neg, 'add})
  case l of
  { 'neg : !Int. ?Int. ?EOS. End
  , 'add : !Int. !Int. ?Int. ?EOS. End
  }

type LClient : ! ~ssn =
  !{'neg}. !Int. ?Int. ?EOS. End

val lClient (d : TClient) (x : Int) : Int =
    let d1 = (send d) 'neg in
    let d2 = (send d1) x in
    let <r,d3> = recv d2 in
    let <xx,zz> = recv d3 in
    -- let zzz = end zz in
    r

type TServer : ! ~ssn =
  ? ( x : { 'neg, 'add })
  case x of
    { 'neg : ?Int. !Int. !EOS. End
    , 'add : ?Int. ?Int. !Int. !EOS. End
    }

val lServer (c : TServer) : End =
	let < l , c1 > = recv c in
	let < x , c2 > = recv c1 in
	case l of
	{ 'neg :
	  let c3 = send c2 (-x) in
	  send c3 'EOS
	, 'add :
	  let < y , c3 > = recv c2 in
	  let c4 = send c3 (x + y) in
	  send c4 'EOS
	}

val main : Unit
val main =
    let sock = 4242 in
    let con = (accept sock (dualof TClient)) in
    let e = lServer con in
    -- let ee = end e in
    ()
