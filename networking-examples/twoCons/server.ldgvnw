-- Simple example of Label-Dependent Session Types
-- Interprets addition of two numbers

type SendInt : ! ~ssn = !Int. !Int. Unit
type ComInt : ! ~ssn = !Int. ?Int. Unit

val send2 (c: SendInt) =
    let x = ((send c) 1) in
    let y = ((send x) 42) in
    ()

val add2 (c1: dualof SendInt) =
    let <m, c2> = recv c1 in
    let <n, c3> = recv c2 in
    ()

val com2S (c2: dualof ComInt) =
    let <n, x> = recv c2 in
    let y = (send x) 42 in
    (n)

val main : Int
val main =
    -- let sock = (create 4242) in
    let con = (accept 4242 (dualof SendInt)) in
    let con2 = (accept 4242 (dualof ComInt)) in
    let a2 = fork (add2 con) in
    let cS = com2S con2 in
    (cS)
